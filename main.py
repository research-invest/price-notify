import os
import asyncio
from telegram import Bot
from telegram.error import TimedOut, TelegramError
import matplotlib.pyplot as plt
from io import BytesIO
import numpy as np
from datetime import datetime, timedelta, timezone
from zoneinfo import ZoneInfo
import json
import logging
import math
from utils import format_number
import traceback
from matplotlib.dates import DateFormatter
from pycoingecko import CoinGeckoAPI
import requests
import matplotlib.dates as mdates
import random
from scipy import stats
from scipy.optimize import curve_fit

logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# timezone = ZoneInfo("Europe/Moscow")
timezone = ZoneInfo("UTC")


class CryptoAnalyzer:
    def __init__(self, symbols: list, telegram: dict, intervals: dict,
                 stickers: dict, tickers_api_url: str):
        self.dpi = 140
        self.symbols = [symbol['name'] for symbol in symbols]
        self.symbol_colors = {symbol['name']: symbol['color'] for symbol in symbols}
        self.symbol_line_widths = {symbol['name']: symbol.get('line_width', 1) for symbol in symbols}
        self.bot = Bot(token=telegram['token'])
        self.chat_id = telegram['chat_id']
        self.intervals = intervals
        self.prices = {symbol: [] for symbol in self.symbols}
        self.volumes = {symbol: [] for symbol in self.symbols}
        self.timestamps = []
        self.stickers = stickers
        self.tickers_api_url = tickers_api_url
        self.last_update = {interval: datetime.now(timezone) for interval in intervals}

    def get_price_and_volume_data(self, symbol: str, interval: int):
        try:
            url = f"{self.tickers_api_url}/tickers?symbol={symbol}&interval={interval}"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                raise ValueError(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
            
            return data
        except requests.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
        except (KeyError, IndexError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None

    async def update_prices(self):
        try:
            current_time = datetime.now(timezone)

            for interval_name, interval_seconds in self.intervals.items():
                if current_time - self.last_update[interval_name] >= timedelta(seconds=interval_seconds):
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {interval_name}")
                    
                    all_data = {}
                    message = ''
                    for symbol in self.symbols:
                        data = self.get_price_and_volume_data(symbol, interval_seconds)
                        if data:
                            all_data[symbol] = data
                            self.prices[symbol] = [item['last_price'] for item in data]
                            self.volumes[symbol] = [item['volume'] for item in data]
                            self.timestamps = [datetime.fromisoformat(item['timestamp'].rstrip('Z')).replace(tzinfo=timezone) for item in data]

                            current_price = self.prices[symbol][-1]
                            formatted_price = format_number(current_price)
                            formatted_volume = format_number(self.volumes[symbol][-1])
                            analysis = self.analyze_prices(symbol, current_price)
                            message += f"{symbol}:\n–¶–µ–Ω–∞: {formatted_price}\n–û–±—ä–µ–º: {formatted_volume}\n–ê–Ω–∞–ª–∏–∑: {analysis}\n\n"
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

                    if all_data:
                        await self.send_message(message)

                        price_volume_chart = self.create_price_volume_chart(interval_name, interval_seconds)
                        await self.send_chart(price_volume_chart)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
                        await self.send_sticker(self.choose_sticker(all_data))
                    
                    self.last_update[interval_name] = current_time

        except Exception as e:
            logger.error(f"Error in update_prices: {e}\n{traceback.format_exc()}")

    def analyze_prices(self, symbol: str, current_price: float) -> str:
        if len(self.prices[symbol]) < 2:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        prices = np.array(self.prices[symbol], dtype=float)

        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = np.diff(prices) / prices[:-1] * 100
        avg_change = np.mean(changes)

        # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # print(f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è {symbol}: {avg_change:.4f}%")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" if avg_change > 0.05 else "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π" if avg_change < -0.05 else "–±–æ–∫–æ–≤–æ–π"

        # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
        if len(prices) >= 10:
            long_term_change = (prices[-1] - prices[-10]) / prices[-10] * 100
            if long_term_change > 0.5:
                trend = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π"
            elif long_term_change < -0.5:
                trend = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"

        # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        volatility = np.std(changes)

        # –†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        ma5 = np.mean(prices[-min(5, len(prices)):])
        ma10 = np.mean(prices[-min(10, len(prices)):])

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        analysis = f"–¢—Ä–µ–Ω–¥: {trend}. "
        analysis += f"–°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã: {avg_change:.2f}%. "
        analysis += f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.2f}%. "

        if current_price > ma5 > ma10:
            analysis += "–¶–µ–Ω–∞ –≤—ã—à–µ MA5 –∏ MA10. –í–æ–∑–º–æ–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–π—Å—è —Ä–æ—Å—Ç. üöÄ"
        elif current_price < ma5 < ma10:
            analysis += "–¶–µ–Ω–∞ –Ω–∏–∂–µ MA5 –∏ MA10. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è. üí© "
        elif ma5 > current_price > ma10:
            analysis += "–¶–µ–Ω–∞ –º–µ–∂–¥—É MA5 –∏ MA10. –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è. "

        if volatility > 2:
            analysis += "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã. üòµ‚Äçüí´"
        elif volatility < 0.5:
            analysis += "–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–µ–Ω —Å–∫–æ—Ä—ã–π –≤—Å–ø–ª–µ—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. ü•≥"

        if trend == "–≤–æ—Å—Ö–æ–¥—è—â–∏–π" and current_price > ma10:
            analysis += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏. üòé"
        elif trend == "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π" and current_price < ma10:
            analysis += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏. üò≠"
        else:
            analysis += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏. ü§ì"

        return analysis

    def create_price_volume_chart(self, interval_name, interval_seconds):
        if len(self.timestamps) < 2:
            return None

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

        formatted_date_time = datetime.now(timezone).strftime("%Y-%m-%d %H:%M:%S")

        caption = f"–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {interval_name} –Ω–∞ {formatted_date_time} #{interval_name}"

        fig.suptitle(caption, fontsize=18)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
        def poly_func(x, a, b, c):
            return a * x ** 2 + b * x + c

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        total_points = len(self.timestamps)
        points_per_annotation = max(1, int(total_points / 10))
        min_interval_seconds = 300
        annotation_interval = max(points_per_annotation, int(min_interval_seconds / interval_seconds))

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π –ª–µ–≥–µ–Ω–¥—ã
        price_lines = []
        volume_lines = []
        price_labels = []
        volume_labels = []

        alpha = 0.35

        def add_slope_annotation(ax, x, y, slope, color):
            angle = math.degrees(math.atan(slope))
            ax.annotate(f'{angle:.1f}¬∞',
                        xy=(x[-1], y[-1]),
                        xytext=(5, 0),
                        textcoords='offset points',
                        color=color,
                        fontsize=10,
                        ha='left',
                        va='center')

        for symbol in self.symbols:
            if len(self.prices[symbol]) != len(self.timestamps):
                logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}. –ü—Ä–æ–ø—É—Å–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
                continue

            color = self.symbol_colors[symbol]
            line_width = self.symbol_line_widths[symbol]

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω
            prices = np.array(self.prices[symbol])
            initial_price = prices[0]
            if initial_price is None:
                continue

            normalized_prices = (prices - initial_price) / initial_price * 100

            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
            price_line, = ax1.plot(self.timestamps, normalized_prices, color=color, label=f'{symbol} –¶–µ–Ω–∞',
                                   linewidth=line_width, linestyle='-')
            price_lines.append(price_line)
            price_labels.append(f'{symbol} –¶–µ–Ω–∞')

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è —Ü–µ–Ω
            x = mdates.date2num(self.timestamps)
            x_scaled = (x - x[0]) / (x[-1] - x[0])  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º x –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
            slope, intercept, r_value, p_value, std_err = stats.linregress(x_scaled, normalized_prices)
            line = slope * x_scaled + intercept
            reg_line, = ax1.plot(self.timestamps, line, color=color, linestyle='--', linewidth=1.5, alpha=alpha)
            add_slope_annotation(ax1, x, line, slope, color)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é –¥–ª—è —Ü–µ–Ω
            try:
                popt, _ = curve_fit(poly_func, x_scaled, normalized_prices)
                x_line = np.linspace(0, 1, 100)
                y_line = poly_func(x_line, *popt)
                approx_line, = ax1.plot(mdates.num2date(x[0] + x_line * (x[-1] - x[0])), y_line, color=color,
                                        linestyle=':', linewidth=2, alpha=alpha)
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∫–ª–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
                poly_slope = 2 * popt[0] * x_line[-1] + popt[1]
                add_slope_annotation(ax1, x, y_line, poly_slope, color)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –¥–ª—è {symbol} (—Ü–µ–Ω—ã): {e}")
                approx_line = None

            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–Ω
            for j, (timestamp, norm_price, price) in enumerate(zip(self.timestamps, normalized_prices, prices)):
                if j % annotation_interval == 0 or j == len(prices) - 1:
                    ax1.annotate(f'{format_number(price)}',
                                 xy=(timestamp, norm_price),
                                 xytext=(0, 5), textcoords='offset points',
                                 ha='center', va='bottom', color=color,
                                 fontsize=8, rotation=45)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–º–æ–≤
            volumes = np.array(self.volumes[symbol])
            initial_volume = volumes[0]
            normalized_volumes = (volumes - initial_volume) / initial_volume * 100

            # –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä–µ–º–∞
            volume_line, = ax2.plot(self.timestamps, normalized_volumes, color=color, label=f'{symbol} –û–±—ä–µ–º',
                                    linewidth=line_width, linestyle='-')
            volume_lines.append(volume_line)
            volume_labels.append(f'{symbol} –û–±—ä–µ–º')

            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –æ–±—ä–µ–º–æ–≤
            slope, intercept, r_value, p_value, std_err = stats.linregress(x_scaled, normalized_volumes)
            line = slope * x_scaled + intercept
            ax2.plot(self.timestamps, line, color=color, linestyle='--', linewidth=1.5, alpha=alpha)
            add_slope_annotation(ax2, x, line, slope, color)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—É—é –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é –¥–ª—è –æ–±—ä–µ–º–æ–≤
            try:
                popt, _ = curve_fit(poly_func, x_scaled, normalized_volumes)
                y_line = poly_func(x_line, *popt)
                ax2.plot(mdates.num2date(x[0] + x_line * (x[-1] - x[0])), y_line, color=color, linestyle=':',
                         linewidth=2, alpha=alpha)
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–∫–ª–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏
                poly_slope = 2 * popt[0] * x_line[-1] + popt[1]
                add_slope_annotation(ax2, x, y_line, poly_slope, color)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –¥–ª—è {symbol} (–æ–±—ä–µ–º—ã): {e}")

            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–±—ä–µ–º–æ–≤
            for j, (timestamp, norm_volume, volume) in enumerate(zip(self.timestamps, normalized_volumes, volumes)):
                if j % annotation_interval == 0 or j == len(volumes) - 1:
                    ax2.annotate(f'{format_number(volume)}',
                                 xy=(timestamp, norm_volume),
                                 xytext=(0, 5), textcoords='offset points',
                                 ha='center', va='bottom', color=color,
                                 fontsize=8, rotation=45)

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –≤ –ª–µ–≥ÔøΩÔøΩ–Ω–¥—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        price_lines.extend([ax1.plot([], [], color='gray', linestyle='--', linewidth=1.5)[0],
                            ax1.plot([], [], color='gray', linestyle=':', linewidth=1)[0]])
        price_labels.extend(['–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è', '–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è'])

        # –î–ª—è –æ–±—ä–µ–º–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ª–∏–Ω–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        volume_labels.extend(['–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è', '–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è'])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—ã
        ax1.legend(price_lines, price_labels, loc='upper left', fontsize=8)
        ax2.legend(volume_lines + [ax2.plot([], [], color='gray', linestyle='--', linewidth=1.5)[0],
                                   ax2.plot([], [], color='gray', linestyle=':', linewidth=1)[0]],
                   volume_labels, loc='upper left', fontsize=8)

        ax1.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã')
        ax1.grid(True)
        ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f"{x:.1f}%"))
        ax1.axhline(y=0, color='gray', linestyle='--')

        ax2.set_xlabel('–í—Ä–µ–º—è')
        ax2.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–º–∞')
        ax2.grid(True)
        ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f"{x:.1f}%"))
        ax2.axhline(y=0, color='gray', linestyle='--')

        plt.gcf().autofmt_xdate()
        ax2.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%H:%M'))

        plt.tight_layout(rect=[0, 0.03, 1, 0.97])

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –¥–æ–º–∏–Ω–∞—Ü–∏–∏ ETH/BTC –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
        if 'ETH/USDT' in self.prices and 'BTC/USDT' in self.prices:
            eth_prices = np.array(self.prices['ETH/USDT'])
            btc_prices = np.array(self.prices['BTC/USDT'])
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–ª—É ETH –∫ BTC
            eth_normalized = (eth_prices - eth_prices[0]) / eth_prices[0] * 100
            btc_normalized = (btc_prices - btc_prices[0]) / btc_prices[0] * 100
            dominance = eth_normalized - btc_normalized
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –¥–æ–º–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
            dom_line, = ax1.plot(self.timestamps, dominance, color='purple', 
                                label='ETH/BTC –î–æ–º–∏–Ω–∞—Ü–∏—è', linewidth=1.5, 
                                linestyle='--', alpha=0.8)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∑–Ω–∞—á–∏–º—ã—Ö —Ç–æ—á–µ–∫ –¥–æ–º–∏–Ω–∞—Ü–∏–∏
            for j, (timestamp, dom) in enumerate(zip(self.timestamps, dominance)):
                if j % annotation_interval == 0 or j == len(dominance) - 1:
                    ax1.annotate(f'D:{dom:.1f}%',
                                xy=(timestamp, dom),
                                xytext=(0, -10), textcoords='offset points',
                                ha='center', va='top', color='purple',
                                fontsize=8, rotation=45)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –¥–æ–º–∏–Ω–∞—Ü–∏–∏ –≤ –ª–µ–≥–µ–Ω–¥—É
            if dominance[-1] > 0:
                dom_status = f'ETH/BTC: +{dominance[-1]:.1f}% (ETH —Å–∏–ª—å–Ω–µ–µ)'
            else:
                dom_status = f'ETH/BTC: {dominance[-1]:.1f}% (BTC —Å–∏–ª—å–Ω–µ–µ)'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
            price_lines.append(dom_line)
            price_labels.append(dom_status)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å –Ω–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        ax1.legend(price_lines, price_labels, loc='upper left', fontsize=8)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∫–æ–Ω–µ—Ü
        if not os.path.exists('render'):
            os.makedirs('render')

        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=self.dpi)
        plt.savefig('render/graph.png', format='png', dpi=self.dpi)
        buf.seek(0)
        plt.close()

        return buf, caption


    async def send_message(self, message: str, max_retries=3):
        for attempt in range(max_retries):
            try:
                await self.bot.send_message(chat_id=self.chat_id, text=message)
                return
            except TimedOut:
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)
                else:
                    logger.error(f"Failed to send message after {max_retries} attempts due to timeout")
            except TelegramError as e:
                logger.error(f"Telegram error occurred: {e}")
                return

    async def send_chart(self, chart_info, max_retries=3):
        if not chart_info:
            return
        chart, caption = chart_info
        for attempt in range(max_retries):
            try:
                await self.bot.send_photo(chat_id=self.chat_id, photo=chart, caption=caption)
                return
            except TimedOut:
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)
                else:
                    logger.error(f"Failed to send chart after {max_retries} attempts due to timeout")
            except TelegramError as e:
                logger.error(f"Telegram error occurred: {e}")
                return

    def choose_sticker(self, all_data):
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        total_change = 0
        for symbol, data in all_data.items():
            if len(data) >= 2:
                change = (data[-1]['last_price'] - data[0]['last_price']) / data[0]['last_price']
                total_change += change

        if total_change > 0:
            return random.choice(self.stickers['positive'])
        else:
            return random.choice(self.stickers['negative'])

    async def send_sticker(self, sticker_id):
        try:
            await self.bot.send_sticker(chat_id=self.chat_id, sticker=sticker_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞: {e}")

    async def run(self):
        while True:
            await self.update_prices()
            await asyncio.sleep(min(self.intervals.values()))  # –ñ–¥–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º


async def main():
    with open('config.json', 'r') as config_file:
        config = json.load(config_file)

    analyzer = CryptoAnalyzer(
        symbols=config['symbols'],
        telegram=config['telegram'],
        intervals=config['intervals'],
        stickers=config['stickers'],
        tickers_api_url=config['tickers_api_url']
    )

    await analyzer.run()

if __name__ == "__main__":
    asyncio.run(main())
